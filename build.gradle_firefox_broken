import org.apache.tools.ant.taskdefs.condition.Os

ext {
    // The drivers we want to use
    drivers = ["firefox", "chrome", "phantomJs"]

    ext {
        groovyVersion = '2.3.6'
        gebVersion = '0.9.3'
        seleniumVersion = '2.42.2'
        chromeDriverVersion = '2.10'
        phantomJsVersion = '1.9.7'
    }
}

apply plugin: 'war'
apply plugin: 'tomcat'
apply plugin: 'java'
apply plugin: 'propdeps'
//apply plugin: 'propdeps-maven'
//apply plugin: 'propdeps-idea'
//apply plugin: 'propdeps-eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'groovy'
apply from: "gradle/idea.gradle"
apply from: "gradle/ci.gradle"
apply from: "gradle/osSpecificDownloads.gradle"

println "PROJECT=" + project.name

buildscript {
  repositories {
	mavenCentral()
	maven { url "http://download.java.net/maven/2" }
	maven { url 'http://repo.spring.io/plugins-release' }
  //jcenter { url 'https://jcenter.bintray.com/' }
  }

  dependencies {
	classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:0.9.9'
	classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.6'
  }
}

repositories { 
  jcenter()
  mavenCentral()
  // Spock snapshots are available from the Sonatype OSS snapshot repository
  maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
 }

dependencies {
	def tomcatVersion = '7.0.42'
	tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
  "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
	tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
	 exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
	}

  //{!begin validation}
  compile 'javax.validation:validation-api:1.1.0.Final'
  compile 'org.hibernate:hibernate-validator:5.0.1.Final'
  //{!end validation}

	compile 'org.springframework:spring-core:4.1.0.RELEASE'
	compile 'org.springframework:spring-webmvc:4.1.0.RELEASE'

	compile 'org.slf4j:slf4j-api:1.7.5'
	runtime 'org.slf4j:slf4j-log4j12:1.7.5'
	
  compile 'org.thymeleaf:thymeleaf-spring3:2.0.18'

	testCompile 'org.springframework:spring-test:4.1.0.RELEASE'
	testCompile 'junit:junit:4.11'
	testCompile "org.mockito:mockito-core:1.9.5"
	testCompile "org.hamcrest:hamcrest-library:1.3"
    
   // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile("org.spockframework:spock-core:0.7-groovy-2.0") {
        exclude group: "org.codehaus.groovy"
    }
  testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
   // If using JUnit, need to depend on geb-junit (3 or 4)
   testCompile "org.gebish:geb-junit4:$gebVersion"

   // Drivers
   testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
   testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
   testCompile("com.github.detro.ghostdriver:phantomjsdriver:1.1.0") {
        // phantomjs driver pulls in a different selenium version
        transitive = false
    }
	provided 'javax.servlet:javax.servlet-api:3.0.1'
}

test {
  testLogging {
    // Show that tests are run in the command-line output
    events 'started', 'passed'
  }
}

task collectJars(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.testRuntime
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://myapp.com"
   }
}

chromeTest {
    dependsOn unzipChromeDriver

    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

phantomJsTest {
    dependsOn unzipPhantomJs

    def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
    systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}

task wrapper(type: Wrapper) { gradleVersion = '2.0' }


test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}

 tomcatRunWar.contextPath = ''
